console.log('üöÄ api.js –ù–ê–ß–ê–õ –ó–ê–ì–†–£–ñ–ê–¢–¨–°–Ø');
// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = '/api/v1';

// –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
function getAuthToken() {
    return localStorage.getItem('access_token');
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
async function apiRequest(endpoint, options = {}) {
    const url = `${API_BASE_URL}${endpoint}`;
    
    const defaultOptions = {
        headers: {},
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º Authorization header –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å
    const token = getAuthToken();
    if (token) {
        defaultOptions.headers['Authorization'] = `Bearer ${token}`;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω Content-Type –∏ –µ—Å—Ç—å body (–Ω–æ –Ω–µ FormData), –¥–æ–±–∞–≤–ª—è–µ–º JSON
    if (!options.headers?.['Content-Type'] && options.body && !(options.body instanceof FormData)) {
        defaultOptions.headers['Content-Type'] = 'application/json';
    }
    
    const config = {
        ...defaultOptions,
        ...options,
        headers: {
            ...defaultOptions.headers,
            ...options.headers,
        },
    };
    
    try {
        const response = await fetch(url, config);
        
        // –ï—Å–ª–∏ 401 - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (response.status === 401) {
            localStorage.removeItem('access_token');
            window.location.href = '/auth.html';
            return;
        }
        
        if (!response.ok) {
            let errorData;
            try {
                errorData = await response.json();
            } catch (e) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (422)
            if (response.status === 422 && errorData.detail && Array.isArray(errorData.detail)) {
                const validationErrors = errorData.detail.map(err => `${err.loc.join('.')}: ${err.msg}`).join(', ');
                throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationErrors}`);
            }
            
            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
        }
        
        return await response.json();
    } catch (error) {
        console.error('API Request failed:', error);
        throw error;
    }
}

// API –º–µ—Ç–æ–¥—ã
const API = {
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    async login(username, password) {
        const formData = new FormData();
        formData.append('username', username);
        formData.append('password', password);
        
        return await apiRequest('/auth/login', {
            method: 'POST',
            body: formData
        });
    },

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    async register(username, email, password) {
        const formData = new FormData();
        formData.append('username', username);
        formData.append('email', email);
        formData.append('password', password);
        
        return await apiRequest('/auth/register', {
            method: 'POST',
            body: formData
        });
    },

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    async confirmRegistration(code, email) {
        const formData = new FormData();
        formData.append('entered_code', code);
        formData.append('email', email);
        
        return await apiRequest('/auth/confirm-register', {
            method: 'PATCH',
            body: formData
        });
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    async sendConfirmationCode(email) {
        return await apiRequest(`/auth/sending-code?email=${encodeURIComponent(email)}`, {
            method: 'POST'
        });
    },

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    async closeConfirmationBox(email) {
        return await apiRequest(`/auth/close-code-confirm-box?email=${encodeURIComponent(email)}`, {
            method: 'DELETE'
        });
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    async getCurrentUser() {
        return await apiRequest('/auth/read-current-user', {
            method: 'GET'
        });
    },
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–∏–∑–∞
    async createQuiz(quizData) {
        return await apiRequest('/quiz/', {
            method: 'POST',
            body: JSON.stringify(quizData)
        });
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserQuizzes() {
        return await apiRequest('/quiz/', {
            method: 'GET'
        });
    }
};
console.log('‚úÖ api.js –ó–ê–ì–†–£–ñ–ï–ù –ü–û–õ–ù–û–°–¢–¨–Æ');