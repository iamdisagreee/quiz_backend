console.log('üöÄ index.js –ù–ê–ß–ê–õ –ó–ê–ì–†–£–ñ–ê–¢–¨–°–Ø');
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ index.js');
    
    const burgerMenu = document.querySelector('.burger-menu');
    const mobileMenu = document.querySelector('.mobile-menu');
    const overlay = document.querySelector('.mobile-menu-overlay');
    const body = document.body;
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const guestContent = document.getElementById('guest-content');
    const userContent = document.getElementById('user-content');
    const guestButtons = document.getElementById('guest-buttons');
    const userButtons = document.getElementById('user-buttons');
    const authNav = document.getElementById('auth-nav');
    const mobileGuestMenu = document.getElementById('mobile-guest-menu');
    const mobileUserMenu = document.getElementById('mobile-user-menu');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é
    const userMenuToggle = document.getElementById('user-menu-toggle');
    const userDropdown = document.getElementById('user-dropdown');
    const usernameDisplay = document.getElementById('username-display');
    const userWelcomeName = document.getElementById('user-welcome-name');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const createdCount = document.getElementById('created-count');
    const completedCount = document.getElementById('completed-count');
    const averageScore = document.getElementById('average-score');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initializePage();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    if (burgerMenu) {
        burgerMenu.addEventListener('click', function() {
            body.classList.toggle('menu-open');
        });
    }

    if (overlay) {
        overlay.addEventListener('click', function() {
            body.classList.remove('menu-open');
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
    document.querySelectorAll('.mobile-menu a').forEach(link => {
        link.addEventListener('click', () => {
            body.classList.remove('menu-open');
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é
    if (userMenuToggle) {
        userMenuToggle.addEventListener('click', function(e) {
            e.stopPropagation();
            if (userDropdown) {
                userDropdown.classList.toggle('show');
            }
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', function() {
        if (userDropdown) {
            userDropdown.classList.remove('show');
        }
    });

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async function initializePage() {
        const token = localStorage.getItem('access_token');

        if (!token) {
            showGuestContent();
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            if (!isTokenValid(token)) {
                localStorage.removeItem('access_token');
                showGuestContent();
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userData = await API.getCurrentUser();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
            showUserContent(userData);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            loadUserStats();
            
        } catch (error) {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            try {
                const tokenPayload = JSON.parse(atob(token.split('.')[1]));
                showUserContent({
                    User: {
                        username: tokenPayload.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    }
                });
            } catch (tokenError) {
                localStorage.removeItem('access_token');
                showGuestContent();
            }
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    function showGuestContent() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if (guestContent) guestContent.classList.remove('hidden');
        if (guestButtons) guestButtons.classList.remove('hidden');
        if (mobileGuestMenu) mobileGuestMenu.classList.remove('hidden');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if (userContent) userContent.classList.add('hidden');
        if (userButtons) userButtons.classList.add('hidden');
        if (authNav) authNav.classList.add('hidden');
        if (mobileUserMenu) mobileUserMenu.classList.add('hidden');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    function showUserContent(userData) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if (guestContent) guestContent.classList.add('hidden');
        if (guestButtons) guestButtons.classList.add('hidden');
        if (mobileGuestMenu) mobileGuestMenu.classList.add('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if (userContent) userContent.classList.remove('hidden');
        if (userButtons) userButtons.classList.remove('hidden');
        if (authNav) authNav.classList.remove('hidden');
        if (mobileUserMenu) mobileUserMenu.classList.remove('hidden');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userData && userData.User) {
            const username = userData.User.username;
            if (usernameDisplay) usernameDisplay.textContent = username;
            if (userWelcomeName) userWelcomeName.textContent = username;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
    function isTokenValid(token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const currentTime = Math.floor(Date.now() / 1000);
            return payload.expire > currentTime;
        } catch (error) {
            return false;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function loadUserStats() {
        try {
            const response = await fetch('/api/v1/users/me/stats', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                }
            });
            
            if (response.ok) {
                const stats = await response.json();
                updateStatsDisplay(stats);
            } else {
                updateStatsDisplay({
                    countCreated: 0,
                    countCompleted: 0,
                    percentage: 0
                });
            }
        } catch (error) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            updateStatsDisplay({
                countCreated: 0,
                countCompleted: 0,
                percentage: 0
            });
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function updateStatsDisplay(stats) {
        if (createdCount) {
            createdCount.textContent = stats.countCreated || 0;
        }
        if (completedCount) {
            completedCount.textContent = stats.countCompleted || 0;
        }
        if (averageScore) {
            averageScore.textContent = (stats.percentage || 0) + '%';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)
    window.logout = function() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
            console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
            localStorage.removeItem('access_token');
            location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        }
    };
});
